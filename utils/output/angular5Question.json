[
  {
    "categories": "angular",
    "question": "What is the purpose of the ViewChild decorator in this component class?",
    "codeExamples": [
      "ts\n@Component({\n    ...\n    template: '<p #bio></p>'\n})\nexport class UserDetailsComponent {\n    @ViewChild('bio') bio;\n}\n"
    ],
    "answersOptions": [
      {
        "answer": "It indicates that the `<p>` tag is rendered as a child of the parent view that uses this component.",
        "isCorrect": false
      },
      {
        "answer": "It makes the `<p>` tag in the template support content projection.",
        "isCorrect": false
      },
      {
        "answer": "It makes the `<p>` tag visible in the final render. If the #bio was used in the template and the @ViewChild was not used in the class, then Angular would automatically hide the `<p>` tag that has #bio on it.",
        "isCorrect": false
      },
      {
        "answer": "It provides access from within the component class to the ElementRef object for the `<p>` tag that has the bio template reference variable in the component's template view.",
        "isCorrect": true
      }
    ],
    "urlFont": "https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/main/angular/angular-quiz.md"
  },
  {
    "categories": "angular",
    "question": "What method is used to wire up a FormControl to a native DOM input element in reactive forms?",
    "codeExamples": [],
    "answersOptions": [
      {
        "answer": "Add the string name given to the FormControl to an attribute named controls on the `<form>` element to indicate what fields it should include.",
        "isCorrect": false
      },
      {
        "answer": "Use the square bracket binding syntax around the value attribute on the DOM element and set that equal to an instance of the FormControl.",
        "isCorrect": false
      },
      {
        "answer": "Use the string name given to the FormControl as the value for the DOM element id attribute.",
        "isCorrect": false
      },
      {
        "answer": "Use the formControlName directive and set the value equal to the string name given to the FormControl.",
        "isCorrect": true
      }
    ],
    "urlFont": "https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/main/angular/angular-quiz.md"
  },
  {
    "categories": "angular",
    "question": "What is the difference between the `paramMap` and the `queryParamMap` on the `ActivatedRoute` class?",
    "codeExamples": [],
    "answersOptions": [
      {
        "answer": "The paramMap is an object literal of the parameters in a route's URL path. The queryParamMap is an Observable of those same parameters.",
        "isCorrect": false
      },
      {
        "answer": "The paramMap is an Observable that contains the parameter values that are part of a route's URL path. The queryParamMap is a method that takes in an array of keys and is used to find specific parameters in the paramMap.",
        "isCorrect": false
      },
      {
        "answer": "paramMap is the legacy name from Angular 3. The new name is queryParamMap.",
        "isCorrect": false
      },
      {
        "answer": "Both are Observables containing values from the requested route's URL string. The paramMap contains the parameter values that are in the URL path and the queryParamMap contains the URL query parameters.",
        "isCorrect": true
      }
    ],
    "urlFont": "https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/main/angular/angular-quiz.md"
  },
  {
    "categories": "angular",
    "question": "Based on the following usage of the async pipe, and assuming the users class field is an Observable, how many subscriptions to the users Observable are being made?",
    "codeExamples": [
      "html\n<h2>Names</h2>\n<div *ngFor=\"let user of users | async\">{{ user.name }}</div>\n<h2>Ages</h2>\n<div *ngFor=\"let user of users | async\">{{ user.age }}</div>\n<h2>Genders</h2>\n<div *ngFor=\"let user of users | async\">{{ user.gender }}</div>\n"
    ],
    "answersOptions": [
      {
        "answer": "None. The async pipe does not subscribe automatically.",
        "isCorrect": false
      },
      {
        "answer": "None. The template syntax is not correct.",
        "isCorrect": false
      },
      {
        "answer": "One. The async pipe caches Observables by type internally.",
        "isCorrect": false
      },
      {
        "answer": "Three. There is one for each async pipe.",
        "isCorrect": true
      }
    ],
    "urlFont": "https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/main/angular/angular-quiz.md"
  },
  {
    "categories": "angular",
    "question": "How can you use the HttpClient to send a POST request to an endpoint from within an addOrder function in this OrderService?",
    "codeExamples": [
      "ts\nexport class OrderService {\n  constructor(private httpClient: HttpClient) {}\n\n  addOrder(order: Order) {\n    // Missing line\n  }\n}\n"
    ],
    "answersOptions": [
      {
        "answer": "`this.httpClient.url(this.orderUrl).post(order);`",
        "isCorrect": false
      },
      {
        "answer": "`this.httpClient.send(this.orderUrl, order);`",
        "isCorrect": false
      },
      {
        "answer": "`this.httpClient.post<Order>(this.orderUrl, order);`",
        "isCorrect": false
      },
      {
        "answer": "`this.httpClient.post<Order>(this.orderUrl, order).subscribe();`",
        "isCorrect": true
      }
    ],
    "urlFont": "https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/main/angular/angular-quiz.md"
  }
]